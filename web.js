// Generated by CoffeeScript 1.4.0
(function() {
  var Player, app, express, http, init, io, onClientDisconnect, onMovePlayer, onNewPlayer, onSocketConnection, path, playerById, players, routes, setEventHandlers, socket, util;

  express = require("express");

  routes = require("./routes");

  http = require("http");

  path = require("path");

  app = express();

  app.configure(function() {
    app.set("port", process.env.PORT || 3000);
    app.set("views", __dirname + "/views");
    app.set("view engine", "jade");
    app.use(express.favicon());
    app.use(express.logger("dev"));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    return app.use(express["static"](path.join(__dirname, "public")));
  });

  app.configure("development", function() {
    return app.use(express.errorHandler());
  });

  app.get("/", routes.index);

  http.createServer(app).listen(app.get("port"), function() {
    return console.log("Express server listening on port " + app.get("port"));
  });

  util = require("util");

  io = require("socket.io");

  Player = require("./game/player").Player;

  socket = void 0;

  players = void 0;

  setEventHandlers = function() {
    return socket.sockets.on("connection", onSocketConnection);
  };

  onSocketConnection = function(client) {
    util.log("New player has connected: " + client.id);
    client.on("disconnect", onClientDisconnect);
    client.on("new player", onNewPlayer);
    return client.on("move player", onMovePlayer);
  };

  onClientDisconnect = function() {
    var removePlayer;
    util.log("Player has disconnected: " + this.id);
    removePlayer = playerById(this.id);
    if (!removePlayer) {
      util.log("Player not found: " + this.id);
      return;
    }
    players.splice(players.indexOf(removePlayer), 1);
    return this.broadcast.emit("remove player", {
      id: this.id
    });
  };

  onNewPlayer = function(data) {
    var existingPlayer, i, newPlayer;
    newPlayer = new Player(data.x, data.y);
    newPlayer.id = this.id;
    this.broadcast.emit("new player", {
      id: newPlayer.id,
      x: newPlayer.x,
      y: newPlayer.y
    });
    i = void 0;
    existingPlayer = void 0;
    i = 0;
    while (i < players.length) {
      existingPlayer = players[i];
      this.emit("new player", {
        id: existingPlayer.id,
        x: existingPlayer.x,
        y: existingPlayer.y
      });
      i++;
    }
    return players.push(newPlayer);
  };

  onMovePlayer = function(data) {
    var movePlayer;
    movePlayer = playerById(this.id);
    if (!movePlayer) {
      util.log("Player not found: " + this.id);
      return;
    }
    movePlayer.x = data.x;
    movePlayer.y = data.y;
    return this.broadcast.emit("move player", {
      id: movePlayer.id,
      x: movePlayer.x,
      y: movePlayer.y
    });
  };

  playerById = function(id) {
    var i;
    i = void 0;
    i = 0;
    while (i < players.length) {
      if (players[i].id === id) {
        return players[i];
      }
      i++;
    }
    return false;
  };

  init = function() {
    players = [];
    socket = io.listen(8000);
    socket.configure(function() {
      socket.set("transports", ["websocket"]);
      return socket.set("log level", 2);
    });
    return setEventHandlers();
  };

  init();

}).call(this);
